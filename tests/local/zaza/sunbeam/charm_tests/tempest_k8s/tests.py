# Copyright (c) 2024 Canonical Ltd.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or
# implied.
# See the License for the specific language governing permissions and
# limitations under the License.

from zaza import model
from zaza.openstack.charm_tests import test_utils
from zaza.openstack.utilities import openstack as openstack_utils

# zaza wait for application state checks all apps,
# so this is for the normal expected state for other apps (not tempest-k8s).
# Individual tests can reuse this, merging with the expected state for tempest-k8s at the time.
OTHER_APP_EXPECTED_STATES = {
    "traefik": {
        "workload-status-message-regex": "^$",
    },
    "mysql": {
        "workload-status-message-regex": "^.*$",
    },
    "tls-operator": {
        "workload-status-message-regex": "^$",
    },
    "rabbitmq": {
        "workload-status-message-regex": "^$",
    },
    "ovn-central": {
        "workload-status-message-regex": "^$",
    },
    "ovn-relay": {
        "workload-status-message-regex": "^$",
    },
    "keystone": {
        "workload-status-message-regex": "^$",
    },
    "glance": {
        "workload-status-message-regex": "^$",
    },
    "nova": {
        "workload-status-message-regex": "^$",
    },
    "placement": {
        "workload-status-message-regex": "^$",
    },
    "neutron": {
        "workload-status-message-regex": "^$",
    },
}


class TempestK8sTest(test_utils.BaseCharmTest):
    """Charm tests for tempest-k8s."""

    @classmethod
    def setUpClass(cls):
        """Run class setup for running tests."""
        super(TempestK8sTest, cls).setUpClass(application_name="tempest")

        # Connect to the OpenStack cloud
        keystone_session = openstack_utils.get_overcloud_keystone_session()
        cls.keystone_client = openstack_utils.get_keystone_session_client(keystone_session)
        cls.glance_client = openstack_utils.get_glance_session_client(keystone_session)
        cls.neutron_client = openstack_utils.get_neutron_session_client(keystone_session)

    def get_tempest_init_resources(self, domain_id):
        """Get the test accounts and associated resources generated by tempest.

        Return a dict of resources containing users, projects, and networks created
        at tempest init stage.
        """
        test_accounts_resources = dict()

        test_accounts_resources["projects"] = [
            project.name
            for project in self.keystone_client.projects.list(domain=domain_id)
            if project.name.startswith('tempest-')
        ]
        test_accounts_resources["users"] = [
            user.name
            for user in self.keystone_client.users.list(domain=domain_id)
            if user.name.startswith('tempest-')
        ]
        test_accounts_resources["networks"] = [
            network["name"]
            for network in self.neutron_client.list_networks()['networks']
            if network["name"].startswith('tempest-')
        ]

        return test_accounts_resources

    def get_domain_id(self):
        """Get tempest domain id."""
        return openstack_utils.get_domain_id(
            self.keystone_client,
            domain_name="CloudValidation-b82746a08d"
        )

    def check_charm_created_resources(self, domain_id):
        """Check charm created resources exists."""
        assert domain_id

        projects = [
            project.name
            for project in self.keystone_client.projects.list(domain=domain_id)
            if project.name == "CloudValidation-test-project"
        ]
        users = [
            user.name
            for user in self.keystone_client.users.list(domain=domain_id)
            if user.name == "CloudValidation-test-user"
        ]

        assert projects
        assert users

    def test_get_lists(self):
        """Verify that the get-lists action returns list names as expected."""
        action = model.run_action_on_leader(self.application_name, "get-lists")
        lists = action.data["results"]["stdout"].splitlines()
        self.assertIn("readonly-quick", lists)
        self.assertIn("refstack-2022.11", lists)

    def test_validate_with_readonly_quick_tests(self):
        """Verify that the validate action runs tests as expected."""
        action = model.run_action_on_leader(
            self.application_name, "validate",
            action_params={
                "test-list": "readonly-quick",
            }
        )
        summary = action.data["results"]["summary"]

        # These are the expected results with the test bundle;
        self.assertIn("Ran: 23 tests", summary)
        self.assertIn("Passed: 19", summary)
        self.assertIn("Skipped: 4", summary)
        self.assertIn("Expected Fail: 0", summary)
        self.assertIn("Unexpected Success: 0", summary)
        self.assertIn("Failed: 0", summary)

    def test_validate_with_readonly_quick_tests_regex(self):
        """Verify that the validate action runs tests with filter."""
        action = model.run_action_on_leader(
            self.application_name, "validate",
            action_params={
                "test-list": "readonly-quick",
                "regex": "[V]ersionsTest.*",
                "exclude-regex": "show_vers.+",
            }
        )
        summary = action.data["results"]["summary"]

        self.assertIn("Ran: 2 tests", summary)
        self.assertIn("Passed: 1", summary)
        self.assertIn("Skipped: 1", summary)
        self.assertIn("Expected Fail: 0", summary)
        self.assertIn("Unexpected Success: 0", summary)
        self.assertIn("Failed: 0", summary)

    def test_quick_cleanup_in_between_tests(self):
        """Verify that quick cleanup in between tests are behaving correctly.

        Test-created resources should be removed. Resources generated by charm and
        discover-tempest-config remain in the cloud.
        """
        # Get the list of images before test is run. Note that until an upstream
        # fix [1] lands and releases, we cannot use `tempest-` prefix as the filter.
        # Instead, we compare the list of all images before and after a test run.
        # [1]: https://review.opendev.org/c/openstack/tempest/+/908358
        before_images = [i.name for i in self.glance_client.images.list()]

        # Get the resources (domain, projects, users, and networks) generated by charm and
        # discover-tempest-config
        domain_id = self.get_domain_id()
        self.check_charm_created_resources(domain_id)
        before_test_accounts_resources = self.get_tempest_init_resources(domain_id)

        # Run a test that will create an image in the cloud
        action = model.run_action_on_leader(
            self.application_name, "validate",
            action_params={
                "regex": "test_image_web_download_import_with_bad_url",
            }
        )
        summary = action.data["results"]["summary"]

        # Verify that the test is successfully ran and passed.
        # Successul test run means the image resource has been created.
        self.assertIn("Ran: 1 tests", summary)
        self.assertIn("Passed: 1", summary)

        # Verify that the image createby test is removed
        after_images = [i.name for i in self.glance_client.images.list()]
        assert after_images == before_images

        # Verify that the resources created by charm and discover-tempest-config
        # (domain, projects, users, and networks) remain intact.
        assert domain_id == self.get_domain_id()
        self.check_charm_created_resources(domain_id)
        after_test_accounts_resources = self.get_tempest_init_resources(domain_id)
        assert after_test_accounts_resources == before_test_accounts_resources

    def test_bounce_keystone_relation_with_extensive_cleanup(self):
        """Test removing and re-adding the keystone relation.

        Extensive cleanup should be triggered upon keystone relation break to
        remove all resources created by discover-tempest-config. Charm-created
        resources gets removed and re-created upon keystone relation rejoin.
        """
        # Verify the existance of charm-created domain, user, project
        domain_id = self.get_domain_id()
        self.check_charm_created_resources(domain_id)

        # Verify the existance of Tempest-created projects and users when
        # keystone relation is joined
        test_accounts_resources = self.get_tempest_init_resources(domain_id)
        assert test_accounts_resources["projects"]
        assert test_accounts_resources["users"]
        assert test_accounts_resources["networks"]

        # Verify that the application is blocked when keystone is missing
        model.remove_relation("tempest", "identity-ops", "keystone")
        model.wait_for_application_states(
            states={
                **OTHER_APP_EXPECTED_STATES,
                "tempest": {
                    "workload-status": "blocked",
                    "workload-status-message-regex": r"^\(identity-ops\) integration missing$",
                },
            }
        )

        # Verify that charm-created resources remain in the cloud
        assert domain_id == self.get_domain_id()
        self.check_charm_created_resources(domain_id)

        # Verify that there are no more Tempest-created projects or users
        # when keystone relation is removed
        test_accounts_resources = self.get_tempest_init_resources(domain_id)
        assert not test_accounts_resources["projects"]
        assert not test_accounts_resources["users"]
        assert not test_accounts_resources["networks"]

        # And then verify that adding it back
        # results in reaching active/idle state again.
        # ie. successful tempest init again.
        model.add_relation("tempest", "identity-ops", "keystone")
        model.wait_for_application_states(
            states={
                **OTHER_APP_EXPECTED_STATES,
                "tempest": {
                    "workload-status": "active",
                    "workload-status-message-regex": "^$",
                },
            }
        )

        # Verify that a new domain is created which replaces the old domain
        new_domain_id = self.get_domain_id()
        assert new_domain_id != domain_id
        self.check_charm_created_resources(new_domain_id)

        # Verify that Tempest re-created projects, users and networks when keystone
        # relation is re-joined
        test_accounts_resources = self.get_tempest_init_resources(new_domain_id)
        assert test_accounts_resources["projects"]
        assert test_accounts_resources["users"]
        assert test_accounts_resources["networks"]
