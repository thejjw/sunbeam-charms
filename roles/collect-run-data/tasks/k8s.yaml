- name: collect microk8s inspection report
  args:
    executable: /bin/bash
  shell: |
    cp /var/snap/microk8s/current/inspection-report-*.tar.gz "{{ zuul.project.src_dir }}/log/"
  failed_when: false
- name: debug describe pods
  args:
    executable: /bin/bash
  shell: |
    set -o pipefail
    MODEL="$(juju models --format=json | jq -r '.models[]["short-name"]' | grep '^zaza-')"
    microk8s.kubectl describe -n $MODEL pods > {{ zuul.project.src_dir }}/log/describe-pods.txt
    CONTROLLER_MODEL="$(microk8s.kubectl get ns | grep controller | awk '{print $1}')"
    microk8s.kubectl describe -n $CONTROLLER_MODEL pods > {{ zuul.project.src_dir }}/log/describe-controller-pods.txt
    exit 0
- name: Collect var logs
  args:
    executable: /bin/bash
  shell: |
    set -o pipefail
    MODEL_NAME=$(juju models --format=json | jq -r '.models[]["short-name"]' | grep '^zaza-')
    UNITS=$(juju status --format oneline | awk '{print $2}' | sed -e 's!:!!' | grep -Ev '^$' | paste -s -d' ')
    for UNIT_NAME in $UNITS; do
        POD_NAME=$(echo $UNIT_NAME | sed -e 's!/!-!')
        CONTAINERS=$(microk8s.kubectl get pods -n $MODEL_NAME $POD_NAME -o jsonpath='{.spec.containers[*].name}' | sed -e 's/charm //')
        for CONTAINER in $CONTAINERS; do
            juju ssh --container $CONTAINER -m $MODEL_NAME $UNIT_NAME "tar zcf /tmp/logs.tgz /var/log/"
            juju scp --container $CONTAINER -m $MODEL_NAME $UNIT_NAME:/tmp/logs.tgz {{ zuul.project.src_dir }}/log/$POD_NAME-$CONTAINER.tgz
        done
    done
- name: Collect pods logs
  args:
    executable: /bin/bash
  shell: |
    set -o pipefail
    LOG_FOLDER={{ zuul.project.src_dir }}/log/pods/
    MODEL_NAME=$(juju models --format=json | jq -r '.models[]["short-name"]' | grep '^zaza-')
    mkdir -p $LOG_FOLDER
    for pod in $(microk8s.kubectl get pods -n $MODEL_NAME -o=jsonpath='{.items[*].metadata.name}');
    do
      echo Collecting logs: $pod
      microk8s.kubectl logs --ignore-errors -n $MODEL_NAME --all-containers $pod > $LOG_FOLDER/$pod.log
    done
